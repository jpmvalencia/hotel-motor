@page "/services"
@using HotelMotorShared.DTOs.ServiceDTOs
@using HotelMotorWeb.Services.Services
@using HotelMotorWeb.Components.Services
@using HotelMotorWeb.Services.WordFiles
@inject ServiceService ServiceService
@inject WordService WordService
@inject IJSRuntime JSRuntime;
@using Microsoft.AspNetCore.Components.Authorization
@using HotelMotorWeb.Services.Auth
@inject ServiceService ServiceService
@inject AuthenticationStateProvider AuthProvider
@inject CustomAuthProvider CustomAuthProvider
@inject NavigationManager Navigation

<h3 class="mb-4 fw-semibold">Lista de Servicios</h3>

@if (isLoading)
{
    <div class="text-muted">Cargando...</div>
}
else if (services != null && services.Any())
{
    <button class="btn btn-secondary mb-3" @onclick="DownloadServicesToWord">
        Generar Servicios a Word
    </button>
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        @foreach (var service in services)
        {
            <ServiceCard Service="service"
                         OnUpdate="HandleServiceUpdated"
                         OnDelete="HandleServiceDeleted" />
        }
    </div>
}
else
{
    <div class="text-muted">No hay servicios registrados.</div>
}

<NavLink href="/services/create"
         class="btn btn-primary rounded-circle position-fixed bottom-0 end-0 m-4 d-flex align-items-center justify-content-center"
         style="width: 60px; height: 60px;">
    <span class="fs-4">+</span>
</NavLink>

@code {
    private List<ServiceDto>? services;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

		var isAdminClaim = user.FindFirst(c => c.Type == "IsAdmin")?.Value;
        bool isAdmin = isAdminClaim == "true" || isAdminClaim == "1";

		if (!isAdmin)
		{
			Navigation.NavigateTo("/vehicles", forceLoad: true);
			return;
		}

        await LoadServicesAsync();
    }

    private async Task LoadServicesAsync()
    {
        services = await ServiceService.GetServicesAsync();
        isLoading = false;
    }

    private async Task HandleServiceUpdated(ServiceDto updatedService)
    {
        await LoadServicesAsync();
    }

    private async Task HandleServiceDeleted(ServiceDto deletedService)
    {
        await LoadServicesAsync();
    }

    private async Task DownloadServicesToWord()
    {
        if (services is null) return;

        var wordBytes = await WordService.GetWordWithServicesAsync(services);
        var fileName = $"servicios_{DateTime.Now:yyyyMMdd_HHmmss}.docx";

        await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(wordBytes));
    }
}
