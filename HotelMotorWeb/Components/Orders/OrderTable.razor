@using HotelMotorShared.Dtos.OrderDTOs
@using HotelMotorWeb.Services.Orders
@using HotelMotorShared.Models
@inject OrderService OrderService
@inject IJSRuntime JSRuntime

<div style="max-width: 600px; height: 300px; margin-bottom: 1rem;">
    <BarChart @ref="barChart" TItem="decimal" />
</div>

<Button class="btn btn-outline-primary mb-3" @onclick="RedrawChart">
    Actualizar gráfico
</Button>

<table class="table table-hover table-bordered">
    <thead class="table-light">
        <tr>
            <th>ID</th>
            <th>Fecha de creación</th>
            <th>Fecha de vencimiento</th>
            <th>Descripción</th>
            <th>Estado</th>
            <th>Valor total</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var order in Orders)
        {
            <tr>
                <td>@order.Id</td>
                <td>@order.CreatedAt.ToShortDateString()</td>
                <td>@order.DueDate.ToShortDateString()</td>
                <td>@order.Summary</td>
                <td>
                    <span class="badge bg-@GetStatusColor(order.Status)">
                        @order.Status
                    </span>
                </td>
                <th>@order.TotalAmount</th>
                <td>
                    <button class="btn btn-primary btn-sm" @onclick="() => ShowEditModal(order)">
                        <i class="bi bi-pencil-fill"></i>
                        </button>
                    <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(order)">
                        <i class="bi bi-trash-fill"></i>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (OrderDto is not null)
{
    <EditOrderModal IsVisible="@isEditModalVisible"
                    Order="OrderDto"
                    OnClose="CloseEditModal"
                    OnUpdate="OnUpdate" />
}

@code {
    [Parameter]
    public IEnumerable<OrderDTO>? Orders { get; set; }
    public OrderDTO? OrderDto;
    [Parameter] public EventCallback<OrderDTO> OnUpdate { get; set; }
    [Parameter] public EventCallback<OrderDTO> OnDelete { get; set; }
    private bool isEditModalVisible = false;

    BarChart<decimal>? barChart;

    private async Task RedrawChart()
    {
        if (Orders is null || !Orders.Any() || barChart is null)
            return;

        await barChart.Clear();

        var labels = Orders.Select(o => $"Orden {o.Id}").ToArray();
        var dataset = new BarChartDataset<decimal>
            {
                Label = "Monto total por orden",
                Data = Orders.Select(o => o.TotalAmount).ToList(),
                BackgroundColor = ChartColor.FromRgba(54, 162, 235, 0.6f),
                BorderColor = ChartColor.FromRgba(54, 162, 235, 1f),
                BorderWidth = 1
            };

        await barChart.AddLabelsDatasetsAndUpdate(labels, dataset);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RedrawChart();
        }
    }

    private async Task ConfirmDelete(OrderDTO order)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "¿Confirmas la eliminación de la orden?"))
        {
            var result = await OrderService.DeleteOrderAsync(order.Id);
            if (result)
            {
                await OnDelete.InvokeAsync(order);
            }
        }
    }

    private string GetStatusColor(string status) => Enum.TryParse<OrderStatus>(status, out var parsedStatus) ? parsedStatus switch
    {
        OrderStatus.Pending => "warning",
        OrderStatus.Completed => "success",
        OrderStatus.InProgress => "primary",
        _ => "secondary"
    } : "secondary";

    private void ShowEditModal(OrderDTO order)
    {
        OrderDto = order;
        isEditModalVisible = true;
    }

    private void CloseEditModal()
    {
        isEditModalVisible = false;
    }
}
